# Added try-catch block to use system identity
try	{
	"Logging in to Azure..."
    Connect-AzAccount -Identity
}
catch {
    Write-Error -Message $_.Exception
    throw $_.Exception
}

########################################################################################
#####################################
# Cleanup old snapshots

# Set variables
$pattern = "pattern-snapshot"  # Replace with your desired snapshot pattern
$keepSnapshots = 3  # Number of snapshots to keep regardless of age
$resourcegroup1 = "<resource-group-name>"
$resourcegroup2 = "<resource-group-name>"

# Get a list of resource groups
$resourceGroups = Get-AzResourceGroup | Where-Object { $_.ResourceGroupName -like $resourcegroup1 -or $_.ResourceGroupName -like $resourcegroup2} 

# Get all Snapshots that meet criteria for cleanup 
$snapshots_to_cleanup = Get-AzSnapshot | Where-Object { $_.Name -like "$pattern" }

# Get Resource Groups for each snapshot so we can remove the locks to allow delete
$resourcegroups_for_locks = $snapshots_to_cleanup.ResourceGroupName | Select-Object -Unique

# Get all Resource Locks that will be removed, add them to an array to later re-create and then delete
$lockdetails = @()
foreach ($item in $resourcegroups_for_locks) {
    $lockdetails += Get-AzResourceLock -ResourceGroupName $item
    Get-AzResourceLock -ResourceGroupName $item | Remove-AzResourceLock -Force
}

# Cleanup all the *pattern* snapshots, Iterate through each resource group
foreach ($resourceGroup in $resourceGroups) {
    Write-Output "Processing resource group: $($resourceGroup.ResourceGroupName)"

    # Get snapshots in the current resource group
    $snapshots = Get-AzSnapshot -ResourceGroupName $resourceGroup.ResourceGroupName

    # Filter snapshots based on pattern
    $filteredSnapshots = $snapshots | Where-Object { $_.Name -like "$pattern" -and $_.Tags.Values -notcontains "donotdelete"}

    # Sort snapshots by creation time in descending order
    $sortedSnapshots = $filteredSnapshots | Sort-Object -Property TimeCreated -Descending

    # Delete excess snapshots while keeping the required number
    $snapshotsToDelete = $sortedSnapshots | Select-Object -Skip $keepSnapshots
    $snapshotsToDelete | ForEach-Object {
        $snapshot = $_
        Write-Output "Deleting snapshot: $($snapshot.Name)"
        Remove-AzSnapshot -ResourceGroupName $resourceGroup.ResourceGroupName -SnapshotName $snapshot.Name -Force
    }
}

# Wait for jobs to finish before adding locks back
Write-Output "Waiting for Remove Snapshot Jobs to Finish"
Get-Job -Command 'Remove-AzSnapshot*' | Wait-Job -Timeout 600

# Recreate all the resource locks with the original details
foreach ($item in $lockdetails) {
    
    # handle error if notes doesnt exist otherwise it fails, and set to empty string
    if(Get-Member -inputobject $item.Properties -name "notes" -Membertype Properties){
        $notes = $item.Properties.notes
        }else{
            $notes = " "
        }
    New-AzResourceLock -LockLevel $item.Properties.level -LockNotes $notes -LockName $item.Name -ResourceGroupName $item.ResourceGroupName -Force
}
